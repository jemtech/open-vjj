// Copyright (C) 2012-2014  Jan-Erik Matthies
// kernel for sorbel
kernel void sorbel(global const float* in, global float* outx, global float* outy, const int width, const int height){
	int xGID = get_global_id(0);
	int yGID = get_global_id(1);
	
	if(xGID > width - 1){
		if(xGID >= width){
			return;
		}
		if(yGID >= height){
			return;
		}
		outx[(xGID * height)+yGID] = 0;
		outy[(xGID * height)+yGID] = 0;
	}
	
	if(yGID > height - 1){
		if(yGID >= height){
			return;
		}
		outx[(xGID * height)+yGID] = 0;
		outy[(xGID * height)+yGID] = 0;
	}
	
	int pos = ((xGID-1)*height)+yGID;
	
	float xRes = in[pos-1]  * -3;
	xRes = xRes + in[pos]   * -10;
	xRes = xRes + in[pos+1] * -3;
	
	float yRes = in[pos-1]  * 3;
	yRes = yRes + in[pos+1] * -3;
	
	pos = pos + (2*height);
	
	xRes = xRes + in[pos-1] * 3;
	xRes = xRes + in[pos]   * 10;
	xRes = xRes + in[pos+1] * 3;
	
	yRes = yRes + in[pos-1] * 3;
	yRes = yRes + in[pos+1] * -3;
				
	pos = pos - height;
	
	yRes = yRes + in[pos-1] * 10;
	yRes = yRes + in[pos+1] * -10;
	
	outx[pos] = xRes;
	outy[pos] = yRes;
}

kernel void sorbelRGB(global const float* redin, global const float* greenin, global const float* bluein, global float* redout, global float* greenout, global float* blueout, const int width, const int height){

	int xGID = get_global_id(0);
	int yGID = get_global_id(1);
	
	if(xGID >= width-1){
		if(xGID == width-1){
			int pos = ((xGID)*height)+yGID;
			redout[pos] = 0;
			greenout[pos] = 0;
			blueout[pos] = 0;
		}
		return;
	}
	if(yGID >= height-1){
		if(yGID == height-1){
			int pos = ((xGID)*height)+yGID;
			redout[pos] = 0;
			greenout[pos] = 0;
			blueout[pos] = 0;
		}
		return;
	}
	
	if(xGID <= 0){
		if(xGID == 0){
			int pos = ((xGID)*height)+yGID;
			redout[pos] = 0;
			greenout[pos] = 0;
			blueout[pos] = 0;
		}
		return;
	}
	if(yGID <= 0){
		if(yGID == 0){
			int pos = ((xGID)*height)+yGID;
			redout[pos] = 0;
			greenout[pos] = 0;
			blueout[pos] = 0;
		}
		return;
	}
	
	float tempx = 0;
	int pos = ((xGID-1)*height)+yGID-1;
	tempx = redin[pos]*-3;
	tempx = tempx + greenin[pos]*-3;
	tempx = tempx + bluein[pos]*-3;
	
	pos = pos +1;
	tempx = tempx + redin[pos]*-10;
	tempx = tempx + greenin[pos]*-10;
	tempx = tempx + bluein[pos]*-10;
	
	pos = pos +1;
	tempx = tempx + redin[pos]*-3;
	tempx = tempx + greenin[pos]*-3;
	tempx = tempx + bluein[pos]*-3;
	
	pos = pos + height + height - 2;
	
	tempx = tempx + redin[pos]*3;
	tempx = tempx + greenin[pos]*3;
	tempx = tempx + bluein[pos]*3;
	
	pos = pos +1;
	tempx = tempx + redin[pos]*10;
	tempx = tempx + greenin[pos]*10;
	tempx = tempx + bluein[pos]*10;
	
	pos = pos +1;
	tempx = tempx + redin[pos]*3;
	tempx = tempx + greenin[pos]*3;
	tempx = tempx + bluein[pos]*3;
	
	
	float tempy = 0;
	pos = ((xGID-1)*height)+yGID-1;
	tempy = redin[pos]*-3;
	tempy = tempy + greenin[pos]*-3;
	tempy = tempy + bluein[pos]*-3;
	
	pos = pos + height;
	tempy = tempy + redin[pos]*-10;
	tempy = tempy + greenin[pos]*-10;
	tempy = tempy + bluein[pos]*-10;
	
	pos = pos + height;
	tempy = tempy + redin[pos]*-3;
	tempy = tempy + greenin[pos]*-3;
	tempy = tempy + bluein[pos]*-3;
	
	pos = pos - height - height + 2;
	
	tempy = tempy + redin[pos]*3;
	tempy = tempy + greenin[pos]*3;
	tempy = tempy + bluein[pos]*3;
	
	pos = pos + height;
	tempy = tempy + redin[pos]*10;
	tempy = tempy + greenin[pos]*10;
	tempy = tempy + bluein[pos]*10;
	
	pos = pos + height;
	tempy = tempy + redin[pos]*3;
	tempy = tempy + greenin[pos]*3;
	tempy = tempy + bluein[pos]*3;
	
	pos = ((xGID)*height)+yGID;
	
	float tempxy = tempx + tempy;
	
	tempxy = tempxy / 96;
	if(tempxy <= 0){
		tempxy = tempxy * (-1);
	}
	blueout[pos] = tempxy;
	
	tempx = tempx / 48;
	if(tempx <= 0){
		tempx = tempx * (-1);
	}
	redout[pos] = tempx;
	
	tempy = tempy / 48;
	if(tempy <= 0){
		tempy = tempy * (-1);
	}
	greenout[pos] = tempy;
	
}